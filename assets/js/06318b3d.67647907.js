"use strict";(self.webpackChunkeventbusforunity=self.webpackChunkeventbusforunity||[]).push([[282],{595:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"getting-started/using-eventbus-outside-of-monobehaviours","title":"Using the EventBus in pure C#","description":"`","source":"@site/docs/getting-started/using-eventbus-outside-of-monobehaviours.md","sourceDirName":"getting-started","slug":"/getting-started/using-eventbus-outside-of-monobehaviours","permalink":"/EventBusForUnity-docs/getting-started/using-eventbus-outside-of-monobehaviours","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"documentationSidebar","previous":{"title":"Static [Listener] methods","permalink":"/EventBusForUnity-docs/getting-started/static-listeners"},"next":{"title":"Dynamic/Runtime Listener registration","permalink":"/EventBusForUnity-docs/getting-started/dynamic-listener-registration"}}');var o=t(4848),r=t(8453);const i={sidebar_position:4},c="Using the EventBus in pure C#",a={},d=[];function u(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsxs)(n.h1,{id:"using-the-eventbus-in-pure-c",children:["Using the EventBus in pure ",(0,o.jsx)(n.code,{children:"C#"})]})}),"\n",(0,o.jsxs)(n.p,{children:["In this case you can use the ",(0,o.jsx)(n.code,{children:"IEventReceiverWithHooks"})," interface, and declare your ",(0,o.jsx)(n.code,{children:"class"}),", ",(0,o.jsx)(n.code,{children:"record"})," or ",(0,o.jsx)(n.code,{children:"struct"})," as ",(0,o.jsx)(n.code,{children:"partial"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["The source generator will add the ",(0,o.jsx)(n.code,{children:"Hook()"})," and ",(0,o.jsx)(n.code,{children:"Unhook()"})," methods to the implementing class/record/struct which you can then call however you want"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'using MyAssemblyName.EventBusForUnity;\n\npublic partial class MyPureCsharpClass : IEventReceiverWithHooks\n{\n    // call Hook() where you would like to register your listeners\n    // call Unhook() to de-register your listeners\n    \n    public MyPureCsharpClass()\n    {\n        Hook();\n        Process();\n    }\n    \n    ~MyPureCsharpClass() // recommended: use IDisposable instead\n    {\n        Unhook();\n    }\n    \n    [Listener]\n    private void OnHelloWorld(OnHelloWorldEvent message)\n    {\n        Console.WriteLine("Hello there from the listener");\n    }\n    \n    public void Process() // just for demo, you can of course call this method anywhere in your application in the same assembly \n    {\n        EventBus.Send(new OnHelloWorldEvent()\n        {\n            Message = "Hello World"\n        });\n    }\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(6540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);