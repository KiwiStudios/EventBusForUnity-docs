"use strict";(self.webpackChunkeventbusforunity=self.webpackChunkeventbusforunity||[]).push([[789],{4342:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"getting-started/static-listeners","title":"Static [Listener] methods","description":"Very straight forward, works out of the box.","source":"@site/docs/getting-started/static-listeners.md","sourceDirName":"getting-started","slug":"/getting-started/static-listeners","permalink":"/EventBusForUnity-docs/getting-started/static-listeners","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"documentationSidebar","previous":{"title":"Customizing registration in MonoBehaviours","permalink":"/EventBusForUnity-docs/getting-started/configure-registration-and-deregistration"},"next":{"title":"Using the EventBus in pure C#","permalink":"/EventBusForUnity-docs/getting-started/using-eventbus-outside-of-monobehaviours"}}');var r=n(4848),o=n(8453);const i={sidebar_position:3},a="Static [Listener] methods",d={},l=[];function c(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"static-listener-methods",children:"Static [Listener] methods"})}),"\n",(0,r.jsx)(t.p,{children:"Very straight forward, works out of the box."}),"\n",(0,r.jsx)(t.p,{children:"Does not need any form of registration or deregistration, as the Listener is just called directly and there is always only one Listener to call."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"using Assembly_CSharp.EventBusForUnity; // Note: per assembly an EventBus is generated, so this might have a different prefix than 'Assembly_CSharp'\n\npublic class OnHelloWorldEvent\n{\n    public string Message; \n}\n\npublic partial class HelloWorldExample : MonoBehaviour\n{\n    [Listener]\n    private static void OnHelloWorld(OnHelloWorldEvent evnt)\n    {\n        // do whatever you want to do\n        Debug.Log(evnt.Message);\n    }\n    \n    private void Start()\n    {\n        EventBus.Send(new OnHelloWorldEvent()\n        {\n            Message = \"Hello World from EventBus for Unity!\"\n        });\n    }\n}\n"})}),"\n",(0,r.jsx)(t.p,{children:"You should see a log entry in Unity when running this now."})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var s=n(6540);const r={},o=s.createContext(r);function i(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);